import {getInstance, Service} from '@orion-js/services'
import crypto from 'crypto'

const sigHashAlg = 'sha256'

@Service()
class Sign {
  sign(payload: string, secret: string) {
    const hmac = crypto.createHmac(sigHashAlg, secret)
    const digest = hmac.update(payload).digest('hex')

    return digest
  }

  /**
   * Verifies that the payload is signed with the secret
   * @param payload The string that was signed
   * @param checksum The signature generated by the sign function and used to verify the payload
   * @param secret The password used to generate the signature
   */
  verify(payload: string, checksum: string, secret: string) {
    const digest = this.sign(payload, secret)
    const digestBuffer = Buffer.from(digest, 'utf8')
    const checksumBuffer = Buffer.from(checksum, 'utf8')
    if (
      checksumBuffer.length !== digestBuffer.length ||
      !crypto.timingSafeEqual(digestBuffer, checksumBuffer)
    ) {
      return false
    } else {
      return true
    }
  }
}

export const sign = getInstance(Sign)
